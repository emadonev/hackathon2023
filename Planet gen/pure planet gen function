from PIL import Image
import noise_gen as ng
import body_gen as bg
from itertools import product

def generate_planet_image(resolution, avg_temperature, mass, radius, flux, star_type):
    persistence = 0.7
    octaves = 7

    water_normalized_noise, land_normalized_noise = ng.NoiseGen.generate_noise(
        resolution, avg_temperature, mass, radius, flux, octaves, persistence, star_type
    )
    clouds_noise_map = ng.NoiseGen.generate_clouds_noise(
        resolution, avg_temperature, mass, radius, flux, octaves, persistence
    )
    water_map, land_map = bg.BodyGen.generate_colors(
        avg_temperature, star_type, mass, radius, flux
    )
    cloud_map = bg.BodyGen.generate_clouds(
        avg_temperature, star_type, mass, radius, flux
    )

    resolution = int(resolution)
    land_image = Image.new("RGBA", (resolution, resolution))
    clouds_image = Image.new("RGBA", (resolution, resolution))
    water_image = Image.new("RGBA", (resolution, resolution))

    land_array = land_image.load()
    clouds_array = clouds_image.load()
    water_array = water_image.load()

    for y, x in product(range(resolution), repeat=2):
        planet_noise_value = land_normalized_noise[y, x]
        land_array[x, y] = find_color(planet_noise_value, land_map)

        cloud_noise_value = clouds_noise_map[y, x]
        clouds_array[x, y] = find_color(cloud_noise_value, cloud_map)

        water_noise_value = water_normalized_noise[y, x]
        water_array[x, y] = find_color(water_noise_value, water_map)

    shadow_image = Image.open("shadow.png").resize((resolution, resolution), Image.LANCZOS)
    output_image = Image.alpha_composite(water_image, land_image)
    output_image = Image.alpha_composite(output_image, clouds_image)
    output_image = Image.alpha_composite(output_image, shadow_image)

    return output_image

def find_color(noise_value, color_map):
    for (lower, upper), color in color_map.items():
        if lower <= noise_value <= upper:
            return color
    return (0, 0, 0, 0)

if __name__ == "__main__":
    resolution = 1024
    avg_temperature = 15
    mass = 1
    radius = 1
    flux = 1
    star_type = "g"

    planet_image = generate_planet_image(resolution, avg_temperature, mass, radius, flux, star_type)
    planet_image.save("generated_planet.png", format="PNG")
